---
import Layout from "../layouts/Layout.astro";
---

<style>
  main {
    padding: 0 0 8rem 0;
  }

	.note-container {
		text-align: center;
	}
  .header {
    text-align: center;
    font-size: 2rem;
  }
  #fret-form {
    border: solid gray 1px;
    border-radius: 8px;
    padding: 12px;
  }
  .numeric-input {
    width: 50px;
  }
  #curr-note {
    font-size: 8rem;
    text-align: center;
		line-height: 1;
  }

  .double {
    border-bottom: solid 1px white;
  }
</style>

<Layout title="Fretboard">
  <main class="">
    <h1 class="header">Fretboard</h1>
    <p>Here is an explanation of how the app works:</p>
    <ul>
      <li>
        <a href="https://youtu.be/oqK0WrcokpM">https://youtu.be/oqK0WrcokpM</a>
      </li>
      <li>
        Start with 3 notes on one string. This app will call out random note,
        play it after you see it called out.
      </li>

      <li>
        Do this for a couple minutes. Practice it until you can play the notes
        right after with no hesitation.
      </li>
      <li>
        The next day, practice the previous days' notes you did already to
        start. Make sure there’s 0 hesitation. Only if you can do that, add one
        note to that string and repeat the process.
      </li>
      <li>
        The next day, repeat the same as above. After finishing the 6th string,
        move to the 5th and so on. Take in data as your doing this like if it’s
        on a dotted/non-dotted fret or relative stuff.
      </li>
      <li>
        Other exercises: identify all the C’s vertically and horizontally.
        Identify all notes in X chord. Identify the intervals in X chord.
      </li>
    </ul>

    <section>
      <form id="fret-form">
        <label for="numericInput">Current string being practiced:</label>
        <input
          class="numeric-input"
          type="number"
          id="numericInput"
          name="numericInput"
          min="1"
          max="6"
          required
        /><small>(1-6)</small><br /><br />

        <label for="commaDelimitedInput">Notes you want to practice:</label>
        <input
          type="text"
          id="commaDelimitedInput"
          name="commaDelimitedInput"
          required
        />
        <small>(Enter comma-delimited letters only like e,f,g)</small><br /><br />
        <label for="numericInput">Time (minutes) you want to practice:</label>
        <input
          type="number"
          id="numericInput2"
          name="numericInput2"
          min="1"
          max="100"
          required
        /><small>(1-100)</small>
        <br />
        <input type="submit" value="Submit" />
      </form>
    </section>
    <section>
      <p>Current string: <span id="curr-string">None</span></p>
      <div>Countdown: <span id="countdown"></span></div>
      <p>Current note:</p>
			<div class="note-container">
				<span id="curr-note">No note</span>
			</div>
    </section>
  </main>
</Layout>

<script>
  const form = document.getElementById("fret-form");
  let countDownIntervalId: number | undefined = undefined;
  let noteIntervalId: number | undefined = undefined;
  const delayInSeconds: number = 3; // Delay in seconds between notes
	let prevUnderlined: boolean = false;

  // Function to shuffle array in place
  function shuffleArray(array: string[]) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }

  function shuffleArrayWithEvenDistribution(
    notes: string[],
    durationInMinutes: number,
    delayInSeconds: number
  ): string[] {
    // Calculate total iterations
    // duration = 60 seconds
    // delay = 3 seconds
    // totalIterations = 60 / 3 = 20
    const totalIterations = Math.floor(
      (durationInMinutes * 60) / delayInSeconds
    );
    const elementsCount = notes.length;

    // Determine repeats per element
    const repeatsPerElement = Math.ceil(totalIterations / elementsCount);

    // Create an array with repeated elements
    const repeatedArray: string[] = [];
    for (let i = 0; i < repeatsPerElement; i++) {
      repeatedArray.push(...notes);
    }

    // Shuffle the repeated array
    shuffleArray(repeatedArray);

    console.log("Here are your notes!", repeatedArray);
    return repeatedArray;
  }

  if (form) {
    form.addEventListener("submit", handleSubmit);
    // Function to validate the comma-delimited string of letters
    function validateText(input: string): boolean {
      const regex = /^[a-zA-Z]+(?:,[a-zA-Z]+)*$/; // Regex to match comma-delimited string of letters
      if (regex.test(input)) {
        return true;
      } else {
        return false;
      }
    }

    // Function to handle form submission
    function handleSubmit(event: SubmitEvent) {
      event.preventDefault(); // Prevent the form from submitting

      const noteInput = document.getElementById(
        "commaDelimitedInput"
      ) as HTMLInputElement | null;
      const stringInput = document.getElementById(
        "numericInput"
      ) as HTMLInputElement | null;

      const timeInput = document.getElementById(
        "numericInput2"
      ) as HTMLInputElement | null;

      if (noteInput && stringInput && timeInput) {
        // Validate the comma-delimited string of notes
        if (!validateText(noteInput.value)) {
          alert("Bad input");
          return;
        }

        //// Set string
        const currStringEle = document.getElementById("curr-string");
        if (currStringEle) {
          currStringEle.innerText = stringInput.value;
        }

        //// Start countdown
        const countdownElement = document.getElementById("countdown");
        if (countdownElement) {
          const timeInMinutes = parseInt(timeInput.value);
          const timeInSeconds = timeInMinutes * 60;

          // Clear previous interval if exists
          if (countDownIntervalId) clearInterval(countDownIntervalId);
          startCountdown(timeInSeconds, countdownElement);
        }

        //// Start going through the notes
        const currNoteElement = document.getElementById("curr-note");
        if (currNoteElement) {
          currNoteElement.innerText = "Loading...";
        }

        // Split the comma-delimited string into an array
        const notes = noteInput.value.split(",");

        // Shuffle the array with even distribution
        const shuffledArray = shuffleArrayWithEvenDistribution(
          notes,
          parseInt(timeInput.value),
          delayInSeconds
        );

        // Clear previous interval if exists
        if (noteIntervalId) clearInterval(noteIntervalId);
        // Update the current note with the shuffled array
        updateCurrNoteWithShuffledArray(shuffledArray, delayInSeconds);
      }

      function startCountdown(duration: number, element: HTMLElement) {
        let timer = duration;
        countDownIntervalId = setInterval(() => {
          const minutes = Math.floor(timer / 60);
          const seconds = timer % 60;

          element.innerText = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;

          if (--timer < 0) {
            clearInterval(countDownIntervalId);
            element.innerText = "Time's up!";
          }
        }, 1000);
      }

      function updateCurrNoteWithShuffledArray(
        shuffledArray: string[],
        delayInSeconds: number
      ) {
        let currentIndex = 0;

        function updateNote() {
          const currNoteElement = document.getElementById("curr-note");
          if (currNoteElement) {
            if (currentIndex < shuffledArray.length) {
							// Last one was a double, remove the underline
							// Or it is a double, add the underline
							if (
                currentIndex > 0 &&
                shuffledArray[currentIndex] === shuffledArray[currentIndex - 1]
              ) {
								if (prevUnderlined) {
									currNoteElement.classList.remove("double");
									prevUnderlined = false;
								} else {
									currNoteElement.classList.add("double");
									prevUnderlined = true;
								}
							} else {
								currNoteElement.classList.remove("double");
								prevUnderlined = false;
							}

              currNoteElement.innerText = shuffledArray[currentIndex];
              currentIndex++;
            } else {
              currNoteElement.innerText = "No more notes";
              clearTimeout(noteIntervalId); // Clear the setTimeout
            }
          }

          // Call updateNote again after the specified delay
          if (currentIndex <= shuffledArray.length) {
            noteIntervalId = setTimeout(updateNote, delayInSeconds * 1000);
          }
        }

        // Start the iteration
        updateNote();
      }
    }
  }
</script>
