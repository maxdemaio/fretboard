---
import Layout from "../layouts/Layout.astro";
---

<style>
  .header {
    text-align: center;
    font-size: 2rem;
  }


  .double {
    border-bottom: solid 1px white;
  }
</style>

<Layout title="Fretboard">
  <section>
    <form class="flex flex-col border border-neutral-600 rounded p-4 gap-4" id="fret-form">
      <div class="flex flex-col md:flex-row gap-2">
        <label for="numericInput">Current string being practiced:</label>
        <input
          class="w-20 numeric-input rounded-sm text-black p-1"
          type="number"
          id="numericInput"
          name="numericInput"
          min="1"
          max="6"
          required
        />
      </div>

      <div class="flex flex-col md:flex-row gap-2">
        <label for="commaDelimitedInput"
          >Notes you want to practice (Enter comma-delimited letters only like
          e,f,g):</label
        >
        <input
        class="rounded-sm text-black p-1"
          type="text"
          id="commaDelimitedInput"
          name="commaDelimitedInput"
          required
        />
      </div>
      <div class="flex flex-col md:flex-row gap-2">
        <label for="numericInput"
          >Time (minutes) you want to practice 1-100):</label
        >
        <input
        class="rounded-sm text-black p-1"
          type="number"
          id="numericInput2"
          name="numericInput2"
          min="1"
          max="100"
          required
        />
      </div>
      <div class="self-center bg-neutral-800 px-4 py-2 rounded hover:bg-neutral-700 transition-colors ease-in-out duration-300 cursor-pointer">
        <input class="cursor-pointer" type="submit" value="Submit" />
      </div>
    </form>
  </section>
  <section class="flex flex-col gap-10">
    <div>
      <p>Current string: <span id="curr-string">None</span></p>
      <div>Countdown: <span id="countdown"></span></div>
      <p>Current note:</p>
    </div>

    <div class="text-5xl md:text-8xl flex items-center justify-center">
      <span id="curr-note">No note</span>
    </div>
  </section>
</Layout>

<script>
  const form = document.getElementById("fret-form");
  let countDownIntervalId: number | undefined = undefined;
  let noteIntervalId: number | undefined = undefined;
  const delayInSeconds: number = 3; // Delay in seconds between notes
  let prevUnderlined: boolean = false;

  // Function to shuffle array in place
  function shuffleArray(array: string[]) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }

  function shuffleArrayWithEvenDistribution(
    notes: string[],
    durationInMinutes: number,
    delayInSeconds: number
  ): string[] {
    // Calculate total iterations
    // duration = 60 seconds
    // delay = 3 seconds
    // totalIterations = 60 / 3 = 20
    const totalIterations = Math.floor(
      (durationInMinutes * 60) / delayInSeconds
    );
    const elementsCount = notes.length;

    // Determine repeats per element
    const repeatsPerElement = Math.ceil(totalIterations / elementsCount);

    // Create an array with repeated elements
    const repeatedArray: string[] = [];
    for (let i = 0; i < repeatsPerElement; i++) {
      repeatedArray.push(...notes);
    }

    // Shuffle the repeated array
    shuffleArray(repeatedArray);

    console.log("Here are your notes!", repeatedArray);
    return repeatedArray;
  }

  if (form) {
    form.addEventListener("submit", handleSubmit);
    // Function to validate the comma-delimited string of letters
    function validateText(input: string): boolean {
      const regex = /^[a-zA-Z]+(?:,[a-zA-Z]+)*$/; // Regex to match comma-delimited string of letters
      if (regex.test(input)) {
        return true;
      } else {
        return false;
      }
    }

    // Function to handle form submission
    function handleSubmit(event: SubmitEvent) {
      event.preventDefault(); // Prevent the form from submitting

      const noteInput = document.getElementById(
        "commaDelimitedInput"
      ) as HTMLInputElement | null;
      const stringInput = document.getElementById(
        "numericInput"
      ) as HTMLInputElement | null;

      const timeInput = document.getElementById(
        "numericInput2"
      ) as HTMLInputElement | null;

      if (noteInput && stringInput && timeInput) {
        // Validate the comma-delimited string of notes
        if (!validateText(noteInput.value)) {
          alert("Bad input");
          return;
        }

        //// Set string
        const currStringEle = document.getElementById("curr-string");
        if (currStringEle) {
          currStringEle.innerText = stringInput.value;
        }

        //// Start countdown
        const countdownElement = document.getElementById("countdown");
        if (countdownElement) {
          const timeInMinutes = parseInt(timeInput.value);
          const timeInSeconds = timeInMinutes * 60;

          // Clear previous interval if exists
          if (countDownIntervalId) clearInterval(countDownIntervalId);
          startCountdown(timeInSeconds, countdownElement);
        }

        //// Start going through the notes
        const currNoteElement = document.getElementById("curr-note");
        if (currNoteElement) {
          currNoteElement.innerText = "Loading...";
        }

        // Split the comma-delimited string into an array
        const notes = noteInput.value.split(",");

        // Shuffle the array with even distribution
        const shuffledArray = shuffleArrayWithEvenDistribution(
          notes,
          parseInt(timeInput.value),
          delayInSeconds
        );

        // Clear previous interval if exists
        if (noteIntervalId) clearInterval(noteIntervalId);
        // Update the current note with the shuffled array
        updateCurrNoteWithShuffledArray(shuffledArray, delayInSeconds);
      }

      function startCountdown(duration: number, element: HTMLElement) {
        let timer = duration;
        countDownIntervalId = setInterval(() => {
          const minutes = Math.floor(timer / 60);
          const seconds = timer % 60;

          element.innerText = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;

          if (--timer < 0) {
            clearInterval(countDownIntervalId);
            element.innerText = "Time's up!";
          }
        }, 1000);
      }

      function updateCurrNoteWithShuffledArray(
        shuffledArray: string[],
        delayInSeconds: number
      ) {
        let currentIndex = 0;

        function updateNote() {
          const currNoteElement = document.getElementById("curr-note");
          if (currNoteElement) {
            if (currentIndex < shuffledArray.length) {
              // Last one was a double, remove the underline
              // Or it is a double, add the underline
              if (
                currentIndex > 0 &&
                shuffledArray[currentIndex] === shuffledArray[currentIndex - 1]
              ) {
                if (prevUnderlined) {
                  currNoteElement.classList.remove("double");
                  prevUnderlined = false;
                } else {
                  currNoteElement.classList.add("double");
                  prevUnderlined = true;
                }
              } else {
                currNoteElement.classList.remove("double");
                prevUnderlined = false;
              }

              currNoteElement.innerText = shuffledArray[currentIndex];
              currentIndex++;
            } else {
              currNoteElement.innerText = "No more notes";
              clearTimeout(noteIntervalId); // Clear the setTimeout
            }
          }

          // Call updateNote again after the specified delay
          if (currentIndex <= shuffledArray.length) {
            noteIntervalId = setTimeout(updateNote, delayInSeconds * 1000);
          }
        }

        // Start the iteration
        updateNote();
      }
    }
  }
</script>
